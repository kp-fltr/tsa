-- Add tables for assessments and quota management
CREATE TABLE IF NOT EXISTS assessments (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  advisor_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  client_id UUID NOT NULL,\n  assessment_version_id UUID NOT NULL,\n  channel TEXT NOT NULL CHECK (channel IN ('email', 'link')),\n  lang TEXT NOT NULL CHECK (lang IN ('EN', 'DE', 'PT')),\n  status TEXT NOT NULL DEFAULT 'requested' CHECK (status IN ('requested', 'sent', 'in_progress', 'completed', 'expired')),\n  requested_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  due_date TIMESTAMPTZ NOT NULL,\n  shareable_link TEXT,\n  notes TEXT,\n  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n);\n\n-- Add assessment versions table\nCREATE TABLE IF NOT EXISTS assessment_versions (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name TEXT NOT NULL,\n  version TEXT NOT NULL,\n  is_active BOOLEAN NOT NULL DEFAULT true,\n  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n);\n\n-- Add quota packages table\nCREATE TABLE IF NOT EXISTS quota_packages (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  advisor_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  package_name TEXT NOT NULL,\n  test_allowance_total INTEGER NOT NULL DEFAULT 0,\n  test_allowance_used INTEGER NOT NULL DEFAULT 0,\n  test_allowance_remaining INTEGER GENERATED ALWAYS AS (test_allowance_total - test_allowance_used) STORED,\n  active BOOLEAN NOT NULL DEFAULT true,\n  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n);\n\n-- Create view for quota info\nCREATE OR REPLACE VIEW vw_fa_quota AS\nSELECT \n  advisor_id,\n  SUM(test_allowance_total) as test_allowance_total,\n  SUM(test_allowance_used) as test_allowance_used,\n  SUM(test_allowance_remaining) as test_allowance_remaining\nFROM quota_packages \nWHERE active = true\nGROUP BY advisor_id;\n\n-- Insert default assessment versions\nINSERT INTO assessment_versions (name, version) VALUES\n  ('Standard Assessment', '1.3'),\n  ('Short Assessment', '2.0'),\n  ('Comprehensive ESG', '1.1'),\n  ('Quick Check', '1.0')\nON CONFLICT DO NOTHING;\n\n-- RPC function for atomic test launch\nCREATE OR REPLACE FUNCTION rpc_launch_test(\n  p_client_id UUID,\n  p_version_id UUID,\n  p_channel TEXT,\n  p_due_date TIMESTAMPTZ,\n  p_lang TEXT,\n  p_notes TEXT DEFAULT NULL\n)\nRETURNS JSON\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nDECLARE\n  v_advisor_id UUID;\n  v_assessment_id UUID;\n  v_quota_remaining INTEGER;\n  v_shareable_link TEXT;\n  v_result JSON;\nBEGIN\n  -- Get current user ID\n  v_advisor_id := auth.uid();\n  \n  IF v_advisor_id IS NULL THEN\n    RAISE EXCEPTION 'Unauthorized: No authenticated user';\n  END IF;\n  \n  -- Check quota\n  SELECT test_allowance_remaining INTO v_quota_remaining\n  FROM vw_fa_quota\n  WHERE advisor_id = v_advisor_id;\n  \n  IF v_quota_remaining IS NULL THEN\n    v_quota_remaining := 0;\n  END IF;\n  \n  IF v_quota_remaining <= 0 THEN\n    RAISE EXCEPTION 'Insufficient quota: % tests remaining', v_quota_remaining;\n  END IF;\n  \n  -- Validate version exists\n  IF NOT EXISTS (SELECT 1 FROM assessment_versions WHERE id = p_version_id AND is_active = true) THEN\n    RAISE EXCEPTION 'Invalid assessment version ID';\n  END IF;\n  \n  -- Validate due date is not in the past\n  IF p_due_date <= NOW() THEN\n    RAISE EXCEPTION 'Due date must be in the future';\n  END IF;\n  \n  -- Insert assessment\n  INSERT INTO assessments (\n    advisor_id,\n    client_id,\n    assessment_version_id,\n    channel,\n    lang,\n    due_date,\n    notes,\n    status\n  ) VALUES (\n    v_advisor_id,\n    p_client_id,\n    p_version_id,\n    p_channel,\n    p_lang,\n    p_due_date,\n    p_notes,\n    'requested'\n  ) RETURNING id INTO v_assessment_id;\n  \n  -- Generate shareable link if channel is 'link'\n  IF p_channel = 'link' THEN\n    v_shareable_link := 'https://app.tsaanalytics.com/assessment/' || v_assessment_id || '?token=' || gen_random_uuid();\n    UPDATE assessments SET shareable_link = v_shareable_link WHERE id = v_assessment_id;\n  END IF;\n  \n  -- Decrement quota\n  UPDATE quota_packages \n  SET \n    test_allowance_used = test_allowance_used + 1,\n    updated_at = NOW()\n  WHERE advisor_id = v_advisor_id \n    AND active = true \n    AND test_allowance_remaining > 0\n  LIMIT 1;\n  \n  -- Build result\n  v_result := json_build_object(\n    'assessment_id', v_assessment_id,\n    'shareable_link', v_shareable_link,\n    'quota_remaining', v_quota_remaining - 1\n  );\n  \n  RETURN v_result;\nEXCEPTION\n  WHEN OTHERS THEN\n    RAISE EXCEPTION 'Launch test failed: %', SQLERRM;\nEND;\n$$;\n\n-- Enable RLS on new tables\nALTER TABLE assessments ENABLE ROW LEVEL SECURITY;\nALTER TABLE quota_packages ENABLE ROW LEVEL SECURITY;\n\n-- RLS policies for assessments\nCREATE POLICY \"Users can view their own assessments\" ON assessments\n  FOR SELECT USING (advisor_id = auth.uid());\n\nCREATE POLICY \"Users can insert their own assessments\" ON assessments\n  FOR INSERT WITH CHECK (advisor_id = auth.uid());\n\nCREATE POLICY \"Users can update their own assessments\" ON assessments\n  FOR UPDATE USING (advisor_id = auth.uid());\n\n-- RLS policies for quota_packages\nCREATE POLICY \"Users can view their own quota\" ON quota_packages\n  FOR SELECT USING (advisor_id = auth.uid());\n\nCREATE POLICY \"Users can insert their own quota\" ON quota_packages\n  FOR INSERT WITH CHECK (advisor_id = auth.uid());\n\nCREATE POLICY \"Users can update their own quota\" ON quota_packages\n  FOR UPDATE USING (advisor_id = auth.uid());\n\n-- Grant necessary permissions\nGRANT SELECT ON assessment_versions TO authenticated;\nGRANT ALL ON assessments TO authenticated;\nGRANT ALL ON quota_packages TO authenticated;\nGRANT SELECT ON vw_fa_quota TO authenticated;\nGRANT EXECUTE ON FUNCTION rpc_launch_test TO authenticated;\n\n-- Insert default quota for existing users (100 tests)\nINSERT INTO quota_packages (advisor_id, package_name, test_allowance_total)\nSELECT \n  id,\n  'Starter Package',\n  100\nFROM auth.users\nWHERE id NOT IN (SELECT advisor_id FROM quota_packages)\nON CONFLICT DO NOTHING;\n\n-- Update database types\nCOMMENT ON TABLE assessments IS 'Assessment test instances launched by advisors';\nCOMMENT ON TABLE assessment_versions IS 'Available assessment versions/templates';\nCOMMENT ON TABLE quota_packages IS 'Test quota packages for advisors';\nCOMMENT ON VIEW vw_fa_quota IS 'Aggregated quota view for advisors';